name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly on Monday at 2 AM UTC
    - cron: '0 2 * * 1'

permissions:
  contents: read
  security-events: write

jobs:
  secrets-scan:
    name: Scan for secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dependency-scan:
    name: Scan dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --desc || true
        continue-on-error: true
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate || true
        continue-on-error: true

  code-quality:
    name: Code quality checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit pylint
      
      - name: Run Bandit security linter
        run: |
          bandit -r mcp-server/src scripts/*.py -f json -o bandit-report.json || true
        continue-on-error: true
      
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json

  docker-scan:
    name: Scan Docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Dockerfiles
        run: |
          # Just check that Dockerfiles exist and are valid
          for dockerfile in Dockerfile.*; do
            if [ -f "$dockerfile" ]; then
              echo "Checking $dockerfile..."
              docker build --no-cache --check -f "$dockerfile" . || true
            fi
          done

  permissions-check:
    name: Check file permissions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for sensitive files
        run: |
          # Check for any .env files that shouldn't be committed
          if git ls-files | grep -E "^\.env$|^\.env\." | grep -v example | grep -v template; then
            echo "ERROR: Found .env files in repository!"
            exit 1
          fi
          
          # Check for hardcoded secrets in code
          if grep -r "api[_-]key\|secret[_-]key\|password" . --include="*.py" --include="*.js" --include="*.ts" \
            | grep -v "os.getenv" \
            | grep -v "process.env" \
            | grep -v "your-api-key" \
            | grep -v "<your-key>" \
            | grep -v "example" \
            | grep -v "template" \
            | grep -v "test" \
            | head -5; then
            echo "WARNING: Found potential hardcoded secrets (check manually)"
          fi
          
          # Check for binary database files
          if git ls-files | grep -E "qdrant_storage|data/qdrant"; then
            echo "ERROR: Found database files in repository!"
            exit 1
          fi