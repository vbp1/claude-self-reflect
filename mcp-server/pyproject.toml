[project]
name = "claude-self-reflect-mcp"
version = "0.2.0"
description = "MCP server for Claude self-reflection with semantic search and memory decay"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
keywords = [
    "mcp",
    "claude",
    "semantic-search",
    "vector-database",
    "memory",
    "qdrant",
    "embeddings",
    "fastmcp"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Operating System :: OS Independent",
    "Framework :: AsyncIO"
]
dependencies = [
    "fastmcp>=0.0.7",
    "qdrant-client>=1.7.0,<2.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic>=2.9.2,<3.0.0",  # Pin to avoid CVE-2024-3772
    "pydantic-settings>=2.0.0,<3.0.0",
    "fastembed>=0.4.0,<1.0.0",
]

[project.optional-dependencies]
test = [
    "pytest>=8.0,<9",
    "pytest-asyncio>=0.23,<2",
]

[project.scripts]
claude-self-reflect-mcp = "src.__main__:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 230
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit (security)
    "BLE",    # flake8-blind-except
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "T10",    # flake8-debugger
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "PIE",    # flake8-pie
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "PGH",    # pygrep-hooks
    "TRY",    # tryceratops
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]
ignore = [
    # Allow non-lowercase variable names for constants
    "N806",   # non-lowercase-variable-in-function
    "N802",   # non-lowercase-function-name

    # Ignore some complexity rules
    "PLR0913", # too-many-arguments
    "PLR2004", # magic-value-comparison
    "PLW0603", # global-statement

    # Security warnings that are false positives for our use case
    "S108",    # hardcoded-temp-file (we use safe temp dirs)
    "S603",    # subprocess-without-shell-equals-true
    "S607",    # start-process-with-partial-path

    # TRY rules that are too strict
    "TRY003",  # raise-vanilla-args
    "TRY300",  # try-consider-else
    "TRY400",  # error-instead-of-exception

    # Allow function calls in default arguments (for FastMCP)
    "B008",    # function-call-in-default-argument

    # Too pedantic rules
    "PERF401", # manual-list-comprehension

]

[tool.ruff.lint.per-file-ignores]
# Test files can have more relaxed rules
"test_*.py" = [
    "S101",    # assert statements are OK in tests
    "PLR2004", # magic values are OK in tests
    "S105",    # hardcoded passwords OK in test fixtures
]

# Scripts can use subprocess and sys.exit
"scripts/*.py" = [
    "S603",    # subprocess calls
    "S607",    # subprocess with partial path
    "T201",    # print statements
]

[tool.pytest.ini_options]
# Allow async tests without explicit @pytest.mark.asyncio
asyncio_mode = "auto"
markers = [
    "integration: marks tests that require external services like Qdrant",
]
